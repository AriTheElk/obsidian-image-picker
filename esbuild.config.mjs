import esbuild from 'esbuild'
import process from 'process'
import builtins from 'builtin-modules'
import { copy } from 'esbuild-plugin-copy'
import { sassPlugin } from 'esbuild-sass-plugin'
import { config } from 'dotenv'
import { promises as fs } from 'fs'
import path from 'path'
import { readFileSync } from 'fs'

config() // Load .env file

// Load package.json to get the package name
const packageJson = JSON.parse(readFileSync('./package.json', 'utf-8'))
const packageName = packageJson.name

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

const prod = process.argv[2] === 'production'

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ['./src/main.tsx', './src/styles.scss'],
  bundle: true,
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    ...builtins,
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: 'info',
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outdir: 'dist',
  minify: prod,
  plugins: [
    sassPlugin({
      verbose: true,
      includePaths: ['./src'],
    }),
    copy({
      assets: [
        {
          from: ['manifest.json'],
          to: ['./manifest.json'],
        },
        {
          from: ['versions.json'],
          to: ['./versions.json'],
        },
      ],
    }),
  ],
})

if (prod) {
  await context.rebuild()
  if (process.env.OBSIDIAN_VAULT_PATH) {
    const destPath = path.join(
      process.env.OBSIDIAN_VAULT_PATH,
      `.obsidian/plugins/${packageName}`
    )
    console.log(`Copying to ${destPath}`)
    await fs.mkdir(destPath, { recursive: true })
    await fs.cp('dist', destPath, { recursive: true })
  }
  process.exit(0)
} else {
  await context.watch()
}
